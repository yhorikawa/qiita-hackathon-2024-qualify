// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
//   sqlc-gen-ts-d1 v0.0.0-a@5663d287bfb2297a3d62286a1c59e21b42a39884f252829ea86d502fcebe94ef

import { D1Database, D1PreparedStatement, D1Result } from "@cloudflare/workers-types/experimental"

type Query<T> = {
  then(onFulfilled?: (value: T) => void, onRejected?: (reason?: any) => void): void;
  batch(): D1PreparedStatement;
}
const createUsersQuery = `-- name: createUsers :exec
INSERT INTO Users (id) VALUES (?1)`;

export type createUsersParams = {
  id: string;
};

export function createUsers(
  d1: D1Database,
  args: createUsersParams
): Query<D1Result> {
  const ps = d1
    .prepare(createUsersQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getUserQuery = `-- name: getUser :one
SELECT id, created_at, updated_at FROM Users WHERE id = ?1`;

export type getUserParams = {
  id: string;
};

export type getUserRow = {
  id: string;
  createdAt: string;
  updatedAt: string;
};

type RawgetUserRow = {
  id: string;
  created_at: string;
  updated_at: string;
};

export function getUser(
  d1: D1Database,
  args: getUserParams
): Query<getUserRow | null> {
  const ps = d1
    .prepare(getUserQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: getUserRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawgetUserRow | null>()
        .then((raw: RawgetUserRow | null) => raw ? {
          id: raw.id,
          createdAt: raw.created_at,
          updatedAt: raw.updated_at,
        } : null)
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

