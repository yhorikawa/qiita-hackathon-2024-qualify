// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
//   sqlc-gen-ts-d1 v0.0.0-a@5663d287bfb2297a3d62286a1c59e21b42a39884f252829ea86d502fcebe94ef

import { D1Database, D1PreparedStatement, D1Result } from "@cloudflare/workers-types/experimental"

type Query<T> = {
  then(onFulfilled?: (value: T) => void, onRejected?: (reason?: any) => void): void;
  batch(): D1PreparedStatement;
}
const customersQuery = `-- name: customers :many
SELECT customerid, companyname, contactname FROM Customers`;

export type customersRow = {
  customerid: number;
  companyname: string | null;
  contactname: string | null;
};

export function customers(
  d1: D1Database
): Query<D1Result<customersRow>> {
  const ps = d1
    .prepare(customersQuery);
  return {
    then(onFulfilled?: (value: D1Result<customersRow>) => void, onRejected?: (reason?: any) => void) {
      ps.all<customersRow>()
        .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

